class TrieNode:
    """Class creates one node in the trie data structure."""

    def __init__(self, given_character):
        """Method initiatializes one node in the trie structure
        with its characteristics.

        Args:
            given_character (string): Node is given a string of character.
        """
#        print("trie-noodin konstruktorissa")
        self.character = given_character
        self.node_is_end_of_word = False
        self.children = {}
        self.word_in_node = None
        self.word_count = 0

    def __repr__(self):
        # node_content = f"Character is {self.character}, end of word is:
        # {self.node_is_end_of_word} and children are {self.children.keys()}"
        # return node_content
        return f"{self.character}"


class Trie:
    """Class creates the overall trie structure and provides
    the key operations (insertion and searching)."""

    def __init__(self):
        """ Method initializes the trie data structure (tree).
        """
#        print("alustaa trie-puuta")
        self.root = TrieNode("")

    def insert_nodes(self, word, given_word_count=1):
        """Method inserts one node in the trie data structure.

        Args:
            word (string): Method is given a word, based on which nodes for
            its characters are added.
            given_word_count (int, optional): Method may be given a frequency number
            indicating how often the word is used in English language normally.
            Defaults to 1.

        """
        node = self.root

        for character in word:
            if character in node.children:
                # print(f"character {character} is already among the node's children")
                node = node.children[character]
            else:
                # print(f"character {character} is not among the node's children")
                new_node = TrieNode(character)
                node.children[character] = new_node
                node = new_node
                # print(f"Insertion continues along the new node {node}")

        node.node_is_end_of_word = True
        node.word_in_node = word
        node.word_count = given_word_count

    def depth_first_search(self, node, previous_node):
        if node.node_is_end_of_word is True:
            # when frequency values are added to the tree, change what is returned here
            # print("last node is reached")
            self.output.append((previous_node + node.character))

        for child in node.children.values():
            # print(
            #    f"ei olla vielä lopussa, ollaan noden lapsessa {child}, jatketaan syvyyshakua")
            self.depth_first_search(child, previous_node + node.character)

    def search_alternative_spellings_for_word(self, given_string):
        # print(f"searching for string: {given_string}")
        node = self.root
        for character in given_string:
            if character in node.children:
                node = node.children[character]
            else:
                return []
        self.output = []
        self.depth_first_search(node, given_string[:-1])

        return self.output

    def search_if_word_in_trie(self, word):
        """Method searches the trie data structure, and returns
        whether the given word is within it.

        Args:
            word (string): A word typed by the user, or generated by the program.

        Returns:
            Boolean: Method returns a Boolean value whether the given word is
            in the trie structure (True) or not (False).
        """
#        print(f"etsimässä {word}")
        node = self.root
        for character in word:
            if character in node.children:
                node = node.children[character]
            else:
                return False
        return node.node_is_end_of_word

    def search_word_full_data(self, word):
        """Method searches the trie data structure, and returns
        whether the given word is within it, and its related characteristics.

        Args:
            word (string): A word typed by the user, or generated by the program.

        Returns:
            Boolean value or tuple: Method returns a Boolean value if the word is
            not in trie, or a tuple consisting of word's related characteristics.
        """
#        print(f"etsimässä tietoa: {word}")
        node = self.root
        for character in word:
            if character in node.children:
                node = node.children[character]
            else:
                return False
        return (node.node_is_end_of_word, node.word_in_node, node.word_count)

    def insert_multiple_words_in_trie(self, given_list):
        """Method inserts multiple words in the trie data structure.

        Args:
            given_list (list): List of words given by application.
        """
        for word in given_list:
            self.insert_nodes(word)

    def insert_multiple_words_with_word_count_in_trie(self, given_list):
        """Method inserts multiple words, with a given frequency, from a list
        to trie data structure.

        Args:
            given_list (list): List of tuples, each tuple consists of word (string),
            and frequency number (integer).
        """
        for item in given_list:
            #            print(item)
            self.insert_nodes(item[0], item[1])


trie = Trie()
